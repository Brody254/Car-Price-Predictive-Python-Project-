#Finding the predictive car prices over the recent years
# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Sample car dataset (you can replace this with your own dataset)
data = {
    "Year": [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025],
    "Mileage": [90000, 80000, 70000, 60000, 50000, 40000, 30000, 25000, 20000, 15000, 10000],
    "Price": [33500, 34000, 35000, 35500, 36000, 38000, 41000, 47000, 47000, 48759, 48978],
    "Inflation": [0.12, 1.26, 2.13, 2.49, 1.76, 1.23, 4.7, 8, 4.12, 2.89, 2.89]
    # Same length as other lists
}
#inflation source: https://www.in2013dollars.com/us/inflation/2015?amount=1
#car price source:   https://www.consumeraffairs.com/finance/new-car-statistics.html
                    #https://www.financialsamurai.com/average-new-car-price/\
                    #https://caredge.com/guides/new-car-price-trends-in-2025

# Load the data into a DataFrame
df = pd.DataFrame(data)

# Prepare the features (X) and target variable (y)
X = df[["Year", "Mileage", "Inflation"]]
y = df["Price"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict prices for the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Add predictions to the original DataFrame
df["Predicted_Price"] = model.predict(X)

# Save the results to a CSV file for Tableau visualization
df.to_csv("car_prices_predictions.csv", index=False)
print("Predictions saved to 'car_prices_predictions.csv'")
